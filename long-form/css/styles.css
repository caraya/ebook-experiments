/**
 * CSS REGIONS EXPERIMENTAL STYLESHEET
 * 
 * TODO: STILL NEED TO FIGURE OUT A WAY TO DISPLAY THE CONTENT FOR BROWSERS THAT DO 
 * NOT SUPPORT REGIONS (FIREFOX AND OPERA) OR THAT DON'T SUPPORT REGIONS FULLY (IE) 
 * THAT IS NOT AS DISRUPTIVE AS WHAT WE WERE DOING BEFORE
 *
 * The code is currentl using the Adobe pollyfill to work across browers. I wouldn't 
 * recommend this for production code but there is a chance that, if it works in Safari 
 * mobile, that it will also work on Chrome for iOS and iBooks.
 *
 * NOTE THAT THE POLYFILL REQUIRES AN ACTIVE SERVER TO WORK AS IT USES XHR TO 
 * RETRIEVE CONTENT. DURING DEVELOPMENT YOU CAN PUT STUFF ON YOU APACHE / MAMP / WAMP 
 * SERVER OR RUN PYTHON SIMPLE SERVER FOLLOWING THESE STEPS (FOR PYTHON 2.7):
 *
 * GO TO THE DIRECTORY WHERE YOUR FILES ARE LOCATED
 * RUN THE FOLLOWING COMMAND: python -m SimpleHTTPServer 8080
 * POINT YOUR BROWSER TO http://localhost:8080/
 *
 * @author Carlos Araya
 * @see http://dev.w3.org/csswg/css-regions/
 * @see http://html.adobe.com/webplatform/layout/regions/
 * @see https://github.com/betravis/css-regions-polyfill/
 */
/**
 * Web Font definition.
 *
 * We define 4 different fonts in the same family to avoid using faux bold and
 * italics.
 *
 * Font selected is SourceSans Pro from Adobe (Open Source License) and the
 * weight selected are:
 *
 * Light
 * Light Italic
 * Semibold
 * Semibold italic
 *
 * Because this is not a technical book I'm not including a monospace font for
 * code examples.
 *
 * Fonts have been subset using Font Squirrel's WebFont Generator
 */

@font-face {
    font-family: 'SourceSans Light';
    src: url('type/sourcesanspro-light.eot');
    src: url('type/sourcesanspro-light.eot?#iefix') format('embedded-opentype'),
         url('type/sourcesanspro-light.woff') format('woff'),
         url('type/sourcesanspro-light.ttf') format('truetype'),
         url('type/sourcesanspro-light.svg#source_sans_prolight') format('svg');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'SourceSans LightIt';
    src: url('type/sourcesanspro-lightit.eot');
    src: url('type/sourcesanspro-lightit.eot?#iefix') format('embedded-opentype'),
         url('type/sourcesanspro-lightit.woff') format('woff'),
         url('type/sourcesanspro-lightit.ttf') format('truetype'),
         url('type/sourcesanspro-lightit.svg#source_sans_prolight_italic') format('svg');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'SourceSans SemiBold';
    src: url('type/sourcesanspro-semibold.eot');
    src: url('type/sourcesanspro-semibold.eot?#iefix') format('embedded-opentype'),
         url('type/sourcesanspro-semibold.woff') format('woff'),
         url('type/sourcesanspro-semibold.ttf') format('truetype'),
         url('type/sourcesanspro-semibold.svg#source_sans_prosemibold') format('svg');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'SourceSans SemiBoldIt';
    src: url('type/sourcesanspro-semiboldit.eot');
    src: url('type/sourcesanspro-semiboldit.eot?#iefix') format('embedded-opentype'),
         url('type/sourcesanspro-semiboldit.woff') format('woff'),
         url('type/sourcesanspro-semiboldit.ttf') format('truetype'),
         url('type/sourcesanspro-semiboldit.svg#source_sans_proSBdIt') format('svg');
    font-weight: normal;
    font-style: normal;
}

/**
 * Defining basic elements and fonts associations
*/

html {
  font-family: 'SourceSans Light';
  font-size: 16px;
  line-height: 1.2;
  padding-left: 2em;
}

em {
  font-family: 'SourceSans LightIt';
}

strong {
  font-family: 'SourceSans SemiBold';
}

em strong,
strong em { /* order of em and strong doesn't matter for styling*/
  font-family: 'SourceSans SemiBoldIt';
}

pre {
  font-family: 'SourceSans Light'
}
/*
 *
 * Links and anchor experiments
 * External Links are underlined
 * Internal links are not underlined
*/
a { /* Local links don't get underlined */
  text-decoration: none;
}

a[href^="http"] { /*  External links get underlined */
  text-decoration: underline;
}

/*
 * Feature Query to hide region-related content from browsers that do not
 * support the feature.
 *
 * Because Safari does not support feature queries according to caniuse.com
 * (http://caniuse.com/#search=@supports) we have to use reverse logic. If
 * the browser does not support regions (using flow-into: region) then we
 * hide all the region related content.
 *
 * To hide the image(s) we have to use a different type of feature query.
 * If the browser supports percentage heights (should be all of them) and it
 * does not support the region features then we hide all images with .picture class
 *
 * Sadly this is still a catch 22 because of lack of complete feature query support.
 * The browsers that will need it are the browsers that may not have it still it is
 * better than to have to use Javascript or jQuery to hide and show shit at run time.
 *
 * Adobe has created a polyfill for css regions. It's something worth exploring both
 * the good and the bad.
*/

/** FEATURE QUERIES WILL BE HERE WHEN I PUT THEM BACK */
@supports not (( flow-into: region; ) or (-webkit-flow-into: region) or (-ms-flow-into: region)) {
  .content {
    visibility: none;
  }
}


/**
 * Content defines the source of the content that will
 * flow into the regions of the document
*/
.content  {
  flow-into: region;
  -webkit-flow-into: region;
  -ms-flow-into: region;
}

/*
 * The region class defines the general styles for the regions
 * content will flow into/through
*/
.region {
  flow-from: region;
  -webkit-flow-from: region;
  -ms-flow-from: region;
  position:relative;
  width: 55%;
  height:300px;
}

/*
 * Using IDs for each region of the flow we can provide individual
 * styles. For most of the regions we added a colored border to
 * make working with the regions easier.
 *
 * There are other regions that have been floated as two column
 * content. It'll be further explained below.
 *
 * Using IDs also allow us to create more complex effects using
 * css transitions, transformations and other cool things (tm)
*/
#region01 {
  /* border: 1px solid #f00; */
}

#region02 {
  /* border: 1px solid #0f0;*/
}

#region03 {
  /* border: 1px solid #00f; */
}

#region04 {
  /* border: 1px solid #f0f;*/
}

/*
 * We setup a larger margin top and bottom for tregions 5 and 6
 * as well as make them narrower.
 *
 * We then float region 5 to the left and region 6 to the right
 * We could have achieved the same effect by making the width
 * 100% and using a multi column layout for that section.
*/
#region05,
#region06{
  margin-top: 3em;
  margin-bottom: 3em;
  /* border: 3px solid #000; */
  width: 45%;
}

#region05 {
  float: left;
}

#region06 {
  float: right;
}

/*
 * Here's how a possible two column layout may look like. Note that
 *
*/
#region07,
#region08,
#region09 {
  /* border: 1px solid #f0f; */
}

/*
 * If we don't clear: both, region 7 will display between
 * region 5 and 6. Sometimes this may be what we want but
 * not in this case
*/
#region07 {
  clear: both;
}

/*

*/
.picture{
  width: 100%;
  max-width: 100%;
  height: 25%;
  max-height: 25%;
  margin-top: 1em;
  margin-bottom: 1em;
}